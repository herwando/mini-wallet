// Code generated by MockGen. DO NOT EDIT.
// Source: module/wallet/usecase/repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/herwando/mini-wallet/module/wallet/entity/model"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(ctx context.Context, account *model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), ctx, account)
}

// ExistAccountByCustomerXid mocks base method.
func (m *MockAccountRepository) ExistAccountByCustomerXid(ctx context.Context, customerXid string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistAccountByCustomerXid", ctx, customerXid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistAccountByCustomerXid indicates an expected call of ExistAccountByCustomerXid.
func (mr *MockAccountRepositoryMockRecorder) ExistAccountByCustomerXid(ctx, customerXid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistAccountByCustomerXid", reflect.TypeOf((*MockAccountRepository)(nil).ExistAccountByCustomerXid), ctx, customerXid)
}

// MockDepositRepository is a mock of DepositRepository interface.
type MockDepositRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDepositRepositoryMockRecorder
}

// MockDepositRepositoryMockRecorder is the mock recorder for MockDepositRepository.
type MockDepositRepositoryMockRecorder struct {
	mock *MockDepositRepository
}

// NewMockDepositRepository creates a new mock instance.
func NewMockDepositRepository(ctrl *gomock.Controller) *MockDepositRepository {
	mock := &MockDepositRepository{ctrl: ctrl}
	mock.recorder = &MockDepositRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepositRepository) EXPECT() *MockDepositRepositoryMockRecorder {
	return m.recorder
}

// CreateDeposit mocks base method.
func (m *MockDepositRepository) CreateDeposit(ctx context.Context, deposit *model.Deposit, wallet *model.Wallet) (*model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeposit", ctx, deposit, wallet)
	ret0, _ := ret[0].(*model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeposit indicates an expected call of CreateDeposit.
func (mr *MockDepositRepositoryMockRecorder) CreateDeposit(ctx, deposit, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeposit", reflect.TypeOf((*MockDepositRepository)(nil).CreateDeposit), ctx, deposit, wallet)
}

// GetDepositByReferenceId mocks base method.
func (m *MockDepositRepository) GetDepositByReferenceId(ctx context.Context, referenceId string) (*model.Deposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositByReferenceId", ctx, referenceId)
	ret0, _ := ret[0].(*model.Deposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositByReferenceId indicates an expected call of GetDepositByReferenceId.
func (mr *MockDepositRepositoryMockRecorder) GetDepositByReferenceId(ctx, referenceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositByReferenceId", reflect.TypeOf((*MockDepositRepository)(nil).GetDepositByReferenceId), ctx, referenceId)
}

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletRepository) CreateWallet(ctx context.Context, wallet *model.Wallet) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepositoryMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepository)(nil).CreateWallet), ctx, wallet)
}

// GetWalletByCustomerXid mocks base method.
func (m *MockWalletRepository) GetWalletByCustomerXid(ctx context.Context, customerXid string) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByCustomerXid", ctx, customerXid)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByCustomerXid indicates an expected call of GetWalletByCustomerXid.
func (mr *MockWalletRepositoryMockRecorder) GetWalletByCustomerXid(ctx, customerXid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByCustomerXid", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletByCustomerXid), ctx, customerXid)
}

// UpdateStatusWallet mocks base method.
func (m *MockWalletRepository) UpdateStatusWallet(ctx context.Context, wallet *model.Wallet) (*model.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusWallet", ctx, wallet)
	ret0, _ := ret[0].(*model.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusWallet indicates an expected call of UpdateStatusWallet.
func (mr *MockWalletRepositoryMockRecorder) UpdateStatusWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusWallet", reflect.TypeOf((*MockWalletRepository)(nil).UpdateStatusWallet), ctx, wallet)
}

// MockWithdrawalRepository is a mock of WithdrawalRepository interface.
type MockWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepositoryMockRecorder
}

// MockWithdrawalRepositoryMockRecorder is the mock recorder for MockWithdrawalRepository.
type MockWithdrawalRepositoryMockRecorder struct {
	mock *MockWithdrawalRepository
}

// NewMockWithdrawalRepository creates a new mock instance.
func NewMockWithdrawalRepository(ctrl *gomock.Controller) *MockWithdrawalRepository {
	mock := &MockWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepository) EXPECT() *MockWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// CreateWithdrawal mocks base method.
func (m *MockWithdrawalRepository) CreateWithdrawal(ctx context.Context, withdrawal *model.Withdrawal, wallet *model.Wallet) (*model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, withdrawal, wallet)
	ret0, _ := ret[0].(*model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockWithdrawalRepositoryMockRecorder) CreateWithdrawal(ctx, withdrawal, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockWithdrawalRepository)(nil).CreateWithdrawal), ctx, withdrawal, wallet)
}

// GetWithdrawalByReferenceId mocks base method.
func (m *MockWithdrawalRepository) GetWithdrawalByReferenceId(ctx context.Context, referenceId string) (*model.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalByReferenceId", ctx, referenceId)
	ret0, _ := ret[0].(*model.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalByReferenceId indicates an expected call of GetWithdrawalByReferenceId.
func (mr *MockWithdrawalRepositoryMockRecorder) GetWithdrawalByReferenceId(ctx, referenceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalByReferenceId", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetWithdrawalByReferenceId), ctx, referenceId)
}
